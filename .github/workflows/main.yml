name: Mas

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      RUNNER_ADMIN_PASSWORD: ${{ secrets.RUNNER_ADMIN_PASSWORD }}
      NGRNK_CACHE_DIR: ${{ github.workspace }}/ngrok_cache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup ngrok
        id: setup_ngrok
        shell: pwsh
        run: |
          # Создание кэша для ngrok
          if (-Not (Test-Path $env:NGRNK_CACHE_DIR)) {
            New-Item -ItemType Directory -Path $env:NGRNK_CACHE_DIR
          }

          $ngrokPath = Join-Path $env:NGRNK_CACHE_DIR "ngrok.exe"

          if (-Not (Test-Path $ngrokPath)) {
            Write-Output "Скачивание ngrok..."
            try {
              Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile "$env:NGRNK_CACHE_DIR/ngrok.zip"
              Expand-Archive -Path "$env:NGRNK_CACHE_DIR/ngrok.zip" -DestinationPath $env:NGRNK_CACHE_DIR
              Remove-Item "$env:NGRNK_CACHE_DIR/ngrok.zip"
              Write-Output "ngrok скачан и распакован."
            }
            catch {
              Write-Error "Ошибка при скачивании или распаковке ngrok: $_"
              exit 1
            }
          }
          else {
            Write-Output "ngrok уже закеширован."
          }

      - name: Authenticate ngrok
        shell: pwsh
        run: |
          try {
            & "$env:NGRNK_CACHE_DIR/ngrok.exe" authtoken $env:NGROK_AUTH_TOKEN
            Write-Output "ngrok аутентифицирован."
          }
          catch {
            Write-Error "Ошибка аутентификации ngrok: $_"
            exit 1
          }

      - name: Set DNS to Cloudflare
        shell: pwsh
        run: |
          try {
            $adapters = Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }
            foreach ($adapter in $adapters) {
              Set-DnsClientServerAddress -InterfaceIndex $adapter.InterfaceIndex -ServerAddresses @("1.1.1.1","1.0.0.1")
              Write-Output "DNS для адаптера $($adapter.Name) установлен на Cloudflare."
            }
          }
          catch {
            Write-Error "Ошибка при настройке DNS: $_"
            exit 1
          }

      - name: Optimize System Performance
        shell: pwsh
        run: |
          try {
            # Установка плана электропитания на Высокую производительность
            powercfg /setactive scheme_min
            Write-Output "План электропитания установлен на Высокую производительность."

            # Отключение анимаций и эффектов для повышения производительности
            Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'WindowMetrics' -Value ''
            Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value '0'
            Write-Output "Анимации и эффекты отключены."

            # Отключение неиспользуемых сервисов
            Stop-Service -Name "SysMain" -Force
            Set-Service -Name "SysMain" -StartupType Disabled
            Write-Output "Сервис SysMain отключен."
          }
          catch {
            Write-Error "Ошибка при оптимизации производительности системы: $_"
            exit 1
          }

      - name: Enable Remote Desktop and Create User
        shell: pwsh
        run: |
          try {
            # Разрешение подключений через RDP
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
            Write-Output "Remote Desktop разрешен."

            # Проверка, существует ли пользователь 'runneradmin'
            $userExists = Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue
            if (-not $userExists) {
              Write-Output "Создание нового пользователя 'runneradmin'..."
              $password = ConvertTo-SecureString $env:RUNNER_ADMIN_PASSWORD -AsPlainText -Force
              New-LocalUser -Name "runneradmin" -Password $password -FullName "Runner Admin" -Description "Admin user for RDP access"
              Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
              Write-Output "Пользователь 'runneradmin' создан и добавлен в группу 'Administrators'."
            }
            else {
              Write-Output "Пользователь 'runneradmin' уже существует. Обновление пароля."
              $password = ConvertTo-SecureString $env:RUNNER_ADMIN_PASSWORD -AsPlainText -Force
              Set-LocalUser -Name "runneradmin" -Password $password

              # Убедимся, что пользователь принадлежит к группе "Administrators"
              $isMember = Get-LocalGroupMember -Group "Administrators" -Member "runneradmin" -ErrorAction SilentlyContinue
              if (-not $isMember) {
                Write-Output "Добавление пользователя 'runneradmin' в группу 'Administrators'."
                Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
              }
              else {
                Write-Output "Пользователь 'runneradmin' уже является членом группы 'Administrators'."
              }
            }
          }
          catch {
            Write-Error "Ошибка при настройке Remote Desktop и пользователя: $_"
            exit 1
          }

      - name: Create ngrok Tunnel for RDP
        shell: pwsh
        run: |
          try {
            Start-Process -FilePath "$env:NGRNK_CACHE_DIR/ngrok.exe" -ArgumentList "tcp 3389" -NoNewWindow -PassThru
            Write-Output "Туннель ngrok для RDP создан."
          }
          catch {
            Write-Error "Ошибка при создании туннеля ngrok: $_"
            exit 1
          }

      - name: Display ngrok Tunnel Information
        shell: pwsh
        run: |
          try {
            Start-Sleep -Seconds 10
            & "$env:NGRNK_CACHE_DIR/ngrok.exe" tcp 3389 --log=stdout
          }
          catch {
            Write-Error "Ошибка при отображении информации о туннеле ngrok: $_"
            exit 1
          }
