name: Mas

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      RUNNER_ADMIN_PASSWORD: ${{ secrets.RUNNER_ADMIN_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup PowerShell
        uses: actions/setup-powershell@v2
        with:
          pwsh-version: '7.3.4' # Specify desired PowerShell version

      - name: Cache ngrok
        uses: actions/cache@v3
        with:
          path: ./ngrok
          key: ${{ runner.os }}-ngrok-${{ hashFiles('**/ngrok.zip') }}
          restore-keys: |
            ${{ runner.os }}-ngrok-

      - name: Download and Extract ngrok
        if: steps.cache_ngrok.outputs.cache-hit != 'true'
        run: |
          Write-Output "Downloading ngrok..."
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip" || exit 1
          Write-Output "Extracting ngrok..."
          Expand-Archive -Path "ngrok.zip" -DestinationPath "./ngrok" || exit 1
        shell: pwsh

      - name: Authenticate ngrok
        run: |
          Write-Output "Authenticating ngrok..."
          ./ngrok/ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN || exit 1
        shell: pwsh

      - name: Set DNS to Cloudflare
        run: |
          Write-Output "Setting DNS servers to Cloudflare..."
          $adapters = Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }
          foreach ($adapter in $adapters) {
              Set-DnsClientServerAddress -InterfaceIndex $adapter.InterfaceIndex -ServerAddresses @("1.1.1.1","1.0.0.1") || exit 1
          }
        shell: pwsh

      - name: Optimize System Performance
        run: |
          Write-Output "Setting power plan to High Performance..."
          powercfg -S SCHEME_MIN || exit 1

          Write-Output "Disabling animations and visual effects..."
          Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'WindowMetrics' -Value '00000000' || exit 1
          Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop\WindowMetrics' -Name 'MinAnimate' -Value '0' || exit 1

          Write-Output "Disabling SysMain service..."
          Stop-Service -Name "SysMain" -Force || Write-Output "SysMain service is not running."
          Set-Service -Name "SysMain" -StartupType Disabled || exit 1
        shell: pwsh

      - name: Enable Remote Desktop and Create User
        run: |
          Write-Output "Enabling Remote Desktop..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 || exit 1
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" || exit 1
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 || exit 1

          $userExists = Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue
          if (-not $userExists) {
              Write-Output "Creating new user 'runneradmin'..."
              $password = ConvertTo-SecureString $Env:RUNNER_ADMIN_PASSWORD -AsPlainText -Force
              New-LocalUser -Name "runneradmin" -Password $password -FullName "Runner Admin" -Description "Admin user for RDP access" || exit 1
              Add-LocalGroupMember -Group "Administrators" -Member "runneradmin" || exit 1
          }
          else {
              Write-Output "User 'runneradmin' already exists. Updating password..."
              $password = ConvertTo-SecureString $Env:RUNNER_ADMIN_PASSWORD -AsPlainText -Force
              Set-LocalUser -Name "runneradmin" -Password $password || exit 1

              $isMember = Get-LocalGroupMember -Group "Administrators" -Member "runneradmin" -ErrorAction SilentlyContinue
              if (-not $isMember) {
                  Write-Output "Adding 'runneradmin' to Administrators group..."
                  Add-LocalGroupMember -Group "Administrators" -Member "runneradmin" || exit 1
              }
              else {
                  Write-Output "User 'runneradmin' is already a member of Administrators."
              }
          }
        shell: pwsh

      - name: Create ngrok Tunnel for RDP
        run: |
          Write-Output "Creating ngrok tunnel for RDP..."
          ./ngrok/ngrok.exe tcp 3389 --log=stdout > ngrok.log &
          Start-Sleep -Seconds 15
        shell: pwsh

      - name: Display ngrok Tunnel Information
        run: |
          Write-Output "Retrieving ngrok tunnel information..."
          $tunnelInfo = Select-String -Path "ngrok.log" -Pattern "tcp://[0-9\.]+:[0-9]+" | Select-Object -First 1
          if ($tunnelInfo) {
              Write-Output "ngrok Tunnel: $($tunnelInfo.Line)"
          }
          else {
              Write-Output "Failed to retrieve ngrok tunnel information."
              exit 1
          }
        shell: pwsh

      - name: Clean up
        run: |
          Write-Output "Cleaning up temporary files..."
          Remove-Item -Path "ngrok.zip" -Force -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Save ngrok Log as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ngrok-log
          path: ngrok.log

      - name: Notify Success
        if: success()
        run: |
          Write-Output "Workflow completed successfully."
        shell: pwsh

      - name: Notify Failure
        if: failure()
        run: |
          Write-Output "Workflow failed. Please check the logs for details."
        shell: pwsh
